<?php

declare(strict_types=1);

namespace {{ namespace }};

use CakephpFixtureFactories\Factory\BaseFactory as CakephpBaseFactory;
use CakephpFixtureFactories\Generator\GeneratorInterface;
{% if useStatements %}
{% for useStatement in useStatements %}
use {{ useStatement }};
{% endfor %}
{% endif %}

/**
 * {{ factory }}
 *
 * @method {{ entityClass }} getEntity()
 * @method array<{{ entityClass }}> getEntities()
 * @method {{ entityClass }}|array<{{ entityClass }}> persist()
 * @method static {{ entityClass }} get(mixed $primaryKey, array $options = [])
 */
class {{ factory }} extends CakephpBaseFactory
{
    /**
     * Defines the Table Registry used to generate entities with
     *
     * @return string
     */
    protected function getRootTableRegistryName(): string
    {
        return '{{ rootTableRegistryName }}';
    }

    /**
     * Defines the factory's default values. This is useful for
     * not nullable fields. You may use methods of the present factory here too.
     *
     * @return void
     */
    protected function setDefaultTemplate(): void
    {
        $this->setDefaultData(function (GeneratorInterface $generator) {
            return [
                {{ FactoryBake.defaultData(defaultData)|raw }}
            ];
        });
    }
{% for association, associationData in toOne %}

    /**
     * @param \Cake\Datasource\EntityInterface|callable|array|string|int|null $parameter
     *
     * @return static
     */
    public function with{{ association }}($parameter = null): static
    {
        return $this->with(
            '{{ association }}',
            {{ associationData.className }}::make($parameter),
        );
    }
{% endfor %}
{% for association, associationData in oneToMany %}

    /**
     * @param \Cake\Datasource\EntityInterface|callable|array|string|int|null $parameter
     * @param int $n
     *
     * @return static
     */
    public function with{{ association }}($parameter = null, int $n = 1): static
    {
        return $this->with(
            '{{ association }}',
            {{ associationData.className }}::make($parameter, $n),
        );
    }
{% endfor %}
{% for association, associationData in manyToMany %}

    /**
     * @param \Cake\Datasource\EntityInterface|callable|array|string|int|null $parameter
     * @param int $n
     *
     * @return static
     */
    public function with{{ association }}($parameter = null, int $n = 1): static
    {
        return $this->with(
            '{{ association }}',
            {{ associationData.className }}::make($parameter, $n)->without('{{ modelName }}'),
        );
    }
{% endfor %}
}
